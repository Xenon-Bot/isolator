syntax = "proto3";

package isolator;

message InitializeIsolateMessage {
  uint64 cpu_time_limit = 1;
  uint64 execution_time_limit = 2;
  uint32 resource_requests_limit = 3;
}

message IsolateInitializedMessage {
  string isolate_id = 1;
}

message ScheduleIsolateScriptMessage {
  enum ScriptKind {
    DEFAULT = 0;
    MODULE = 1;
  }

  string nonce = 1;
  ScriptKind kind = 2;
  string content = 3;
}

message IsolateScriptDoneMessage {
  message IsolateScriptError {
    string text = 2;
  }
  message IsolateScriptSuccess {
    // JSON representation of the javascript result
    string data = 1;
  }

  string nonce = 1;
  oneof result {
    IsolateScriptSuccess success = 2;
    IsolateScriptError error = 3;
  }
}

message GetIsolateStatusMessage {

}

message IsolateScriptResourceRequestMessage {
  string resource_id = 1;
  string kind = 2;
  bytes payload = 3;
}

message IsolateScriptResourceResponseMessage {
  string resource_id = 1;
  bytes payload = 3;
}

message IsolateRequest {
  oneof message {
    InitializeIsolateMessage initialize_message = 1;
    ScheduleIsolateScriptMessage script_schedule_message = 2;
    IsolateScriptResourceResponseMessage script_resource_response = 3;
  }
}

message IsolateResponse {
  oneof message {
    IsolateInitializedMessage initialized_message = 1;
    IsolateScriptDoneMessage script_done_message = 2;
    IsolateScriptResourceRequestMessage script_resource_request = 3;
  }
}

message GetStatusRequest {

}

message GetStatusResponse {

}

message KillIsolatesRequest {
  bool all = 1;
  repeated string isolate_ids = 2;
}

message KillIsolatesResponse {
  repeated string killed_ids = 1;
}

service Isolator {
  rpc AcquireIsolate(stream IsolateRequest) returns (stream IsolateResponse) {}
  rpc GetStatus(GetStatusRequest) returns (GetStatusResponse) {}
  rpc KillIsolates(KillIsolatesRequest) returns (KillIsolatesResponse) {}
}